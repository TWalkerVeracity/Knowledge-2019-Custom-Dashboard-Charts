<?xml version="1.0" encoding="UTF-8"?><record_update table="content_block_programmatic">
    <content_block_programmatic action="INSERT_OR_UPDATE">
        <active>true</active>
        <category>general</category>
        <condition/>
        <conditional>false</conditional>
        <frame/>
        <logged_on>false</logged_on>
        <name>Bar Chart</name>
        <programmatic_content><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<j:jelly trim="false" xmlns:j="jelly:core" xmlns:g="glide" xmlns:j2="null" xmlns:g2="null">

    <!-- Set Unique Identifier -->
	<g:evaluate var="jvar_uuid" object="true">
        //We prepend our globals with this UUID to avoid collisions
        'UUID_' + Math.round(Math.random() * 10000000000);
	</g:evaluate>

    <!-- Upfront Config Object -->
	<script>
		var ${jvar_uuid}_config = {
			table: 'incident',
			counts: [
				{
					label: 'P-1',
					filter: 'priority=1',
				},
				{
					label: 'P-2',
					filter: 'priority=2',
				},
				{
					label: 'P-3',
					filter: 'priority=3',
				},
				{
					label: 'P-4',
					filter: 'priority=4',
				},
			],
			yAxisLabel: "Incident Count",
			xAxisLabel: "Priority"
		};
	</script>

	<!-- Enable or disable logging -->
    <j:set var="jvar_verbose_logging" value="1 == 1" />

	<style>
		#${jvar_uuid}{
			height: 100%;
		}
	</style>
	
    <!-- Create the area where we will create our chart -->
    <div id="${jvar_uuid}" style="width=100%; height=100%">
        <div class="icon icon-loading"></div>
    </div>

    <script>
        //Identify the widget's sys_id
		var uuid${jvar_uuid} =$j("#${jvar_uuid}").closest(".grid-widget-content")[0].getAttribute("data-original-widget-sysid");
		
        // Initialize the object to keep us safely scoped
		var customFilter${jvar_uuid} = (function(){
			// main object we will be using
			var customFilter = {
				id: uuid${jvar_uuid}
				,logName: uuid${jvar_uuid}
				,config: {
					table: null, 
					display: {}, 
					mapping: null}
				,elements: {
					main: $j('#${jvar_uuid}'), 
					source: null}
				,filter: {}
				,dashboardMessageHandler: null
				,data: {
					series: false,
					categories: false}
				,colors: {}
				,canvas: {
					existingFilters: null
				}
				,eventbus: function(){ 
					return SNC.canvas.eventbus;
				}()
				,filterUtil: function(){ 
					return SNC.canvas.interactiveFilters;
				}()
				,jsonErrorCount: 0
				,pane: null
				,verboseLogging: ${jvar_verbose_logging}
			};

			var EVENTS = {
				REMOVE_FILTER : 'remove-interactive-filter',
				RESET_FILTER: 'reset-interactive-filter',
				RESIZE: 'resize'
			};

			// isInResponsiveDashboard checks if the current page is a responsive canvas
			var isInResponsiveDashboard = (typeof window.SNC !== 'undefined' ${AMP}${AMP} typeof window.SNC.canvas !== 'undefined' ${AMP}${AMP} typeof window.SNC.canvas.isGridCanvasActive !== 'undefined' ${AMP}${AMP} typeof window.SNC.canvas.interactiveFilters !== 'undefined');

			// We check if we are in preview mode
			var isNotInPreviewMode = customFilter.elements.main.closest(".grid-widget-content").length > 0;

			//Set everything up once it is loaded
			customFilter.init = function init(){
				customFilter.pane = customFilter.getPane();

				// Parse the config
				try {
					customFilter.config = ${jvar_uuid}_config;
				} catch(e) {
					customFilter.log(e);
				}

				customFilter.setLogName();
				console.group(customFilter.logName + ' Initialization');
			
				// print some helpful debug info
				customFilter.log('Type: ${jvar_type}');

				// gets the persistent ID for the widget which is unique to the dashboard/tab/widget and the data-uuid, eventbus requires these
				customFilter.id = customFilter.elements.main.closest(".grid-widget-content")[0].getAttribute("data-original-widget-sysid");
				customFilter.data_uuid = customFilter.elements.main.closest('.grid-stack-item').attr('data-uuid');
				
                // don't initialize if we aren't on a dashboard
				if (isInResponsiveDashboard){
					// Register DashboardMessageHandler only once
					if(!customFilter.dashboardMessageHandler){
						customFilter.registerDashboardMessageHandler(customFilter.id);
					}

					//Don't attach to events if we are in preview mode
					if(isNotInPreviewMode){
						this.eventbus.subscribe('setBreakdownParams', this.showFilters);
						this.eventbus.subscribe(customFilter.data_uuid, this.resizeHandler.bind(this));
					}
				}
				else {
					console.error("Custom charts will not work on non canvas mode");
				}

				//Set the style if there is one to set and grab the filters
				customFilter.setStyle();
				customFilter.showFilters();

				//customFilter.log('init complete');
				console.groupEnd()
			};

			//When logging, display something useful
			customFilter.setLogName = function (){
				customFilter.logName = customFilter.decodeHtml(customFilter.pane.prefs.title);
				return;
			};

			customFilter.decodeHtml = function(html){
				var txt = document.createElement("textarea");
				txt.innerHTML = html;
				return txt.value;
			}

			customFilter.resizeHandler = function(data){
				if(data.action === EVENTS.RESIZE){
					if(this.chart){
                        var chartObj = this.chart.highcharts();
                        chartObj.reflow();
					}
				}
			}
			// return index of the array of panes
			customFilter.getPaneIndex = function (pane){
				return pane.widgetSysId == customFilter.id;
			}

			// get the pane so we can access the properties
			customFilter.getPane = function (){
				return SNC.canvas.layoutJson.panes[SNC.canvas.layoutJson.panes.findIndex(customFilter.getPaneIndex)];
			}

			// call to look up persistent defaults. This is very similar to the standard call but the success is customized.
			// @TODO see if we can use the OOTB script in SNC.canvas.interactiveFilters -getDefaultValueByKey()
			customFilter.fetchDefaultValues = function (canvasSysId) {
				return $j.ajax({
					url: "xmlhttp.do",
					contentType: "application/json;charset=utf-8",
					headers: {'X-UserToken': window.g_ck},
					data: {
						'sysparm_scope': 'global',
						'sysparm_want_session_messages': 'true',
						'sysparm_processor': 'InteractiveFilterDefaults',
						'sysparm_name': 'getDefaultValues',
						'sysparm_canvas_id': canvasSysId
					},
					error: function (jqXHR, error, errorThrown) {
						if (window.console) console.log('Error getting filter defaults', errorThrown);
					},
					success: function (data) {
						//customFilter.log('fetchDefaultValues - success', data);
						var result = $j(data).find("result").first();
						var defaultValues;
						if(result.attr('filters')){
							defaultValues = JSON.parse(result.attr('filters'));
						}
						customFilter.getFilterValues(defaultValues);
						return;
					}
				});
			};

			// process raw data to get just the values
			customFilter.getFilterValues = function (defaultObj){
				if(!defaultObj){
					customFilter.log('No persistent values found');
					return;
				}

				var values = [];
				for(var f = 0; f != defaultObj.length; f++){
					if(defaultObj[f].id == customFilter.id){
						for(var p in defaultObj[f].queryParts[0]){
							values = defaultObj[f].queryParts[0][p].values;
							break;
						};
					}
				}
				if (values ${AMP}${AMP} values.length){
					customFilter.log('Persistent values found:', values);
					customFilter.setDefaultValues(values);
				} 
				else {
					customFilter.log('Persistent values found but they are empty:', defaultObj);
				}
			};

			// standard log function
			customFilter.log = function (str, obj){
				console.log(customFilter.logName + ': ' + str);
				if(obj){
					console.log(obj);
				}
			};

			// applies style to the custom visualization
			customFilter.setStyle = function (){
				if(customFilter.config.display ${AND} customFilter.config.display.style){
					customFilter.elements.main.css(customFilter.config.display.style);
				}
			};

			customFilter.getFilters = function (){
				var filters = '';
				var defaultFilters = customFilter.filterUtil.defaultValues;
				for (var key in defaultFilters) {
					if (defaultFilters.hasOwnProperty(key)) {
						defaultFilters[key].map(function(filter){
							if(filter.table === customFilter${$jvar_uuid}.config.table)
								filters += filter.filter + '^';
						});
					}
				}
				filters = filters.substr(0, filters.lastIndexOf('^'));
				return filters;
			};

			// we parse JSON a lot so a standard call with error handling
			customFilter.parseJSONreturn = function (response){
				try {
					return JSON.parse(response);
				} catch (e) {
					// there often seems to be one of these, so ignore the first one for now until we can stop that from happening
					customFilter.jsonErrorCount++;
					if(customFilter.jsonErrorCount > 1){
						customFilter.log ("Failed to parse response: " + e + " - " + response);
					}
					return false;
				}
			};


			// Register handlers to handle Reset and Remove filter on Dashboard
			customFilter.registerDashboardMessageHandler = function (id){
				var dashboardMessageHandler = new DashboardMessageHandler(id);
				if (isInResponsiveDashboard ${AMP}${AMP} customFilter.eventbus) {
					customFilter.dashboardMessageHandler = dashboardMessageHandler;
					// this line is the difference between filters and custom visualizations
					customFilter.dashboardMessageHandler.setCallback(function(){setTimeout(function(){customFilter.showFilters();}, 100)});
					customFilter.eventbus.subscribe(EVENTS.REMOVE_FILTER, customFilter.onDestroyFilterCallback);
					customFilter.eventbus.subscribe(EVENTS.RESET_FILTER, customFilter.onResetFilterCallback);
				}
			};

			// standard call to get data from Table/Aggregate/ScoreCard APIs
			customFilter.getData = function (url, additionalVars){
				if(customFilter.verboseLogging){
					customFilter.log ('URL: ' + url);
					customFilter.log ('additionalVars', additionalVars);
				}
				var client = new XMLHttpRequest();
				client.open('GET', url);
				client.setRequestHeader('Accept', 'application/json');
				client.setRequestHeader('Content-Type', 'application/json');
				client.setRequestHeader('X-UserToken', window.g_ck);

				client.onreadystatechange = function() {
					if(this.readyState == this.DONE ${AMP}${AMP} this.status == 200) {
						var results = customFilter.parseJSONreturn(this.response);
						if(results != false){
							// you may need to over ride this in your visualization
							customFilter.processResults(results, additionalVars);
						}
					}
				};
				client.send(null);
			};

			// this logic is specific to each custom filter. This is a place holder which will warn you if you are missing the logic rather than error out
			customFilter.processResults = function (results, additionalVars){
                //We append the additionalVars to the category and the count to the series
				if(!customFilter.data.categories) customFilter.data.categories = [];
				if(!customFilter.data.series) customFilter.data.series = [];
                customFilter.data.categories.push(additionalVars.label);
                customFilter.data.series.push({y: parseInt(results.result.stats.count), url: additionalVars.onClickRedirectUrl});

				// renderChart is defined in the individual visualization
				customFilter.renderChart();
			};

			// combines all the existing filters on the canvas for custom visualizations
			customFilter.getCombinedFilters = function (scoreObj){
				var filter = '';
				// get initial filters from config
				if(scoreObj.filter){
					filter += scoreObj.filter;
				}
				// get values form interactive filters
				if(customFilter.canvas.existingFilters){
					filter += '^' + customFilter.canvas.existingFilters;
				}
				return filter;
			};


			// combines all the existing filters on the canvas for custom visualizations
			customFilter.showFilters = function (){
				customFilter.canvas.existingFilters = customFilter.getFilters();
				if(customFilter.canvas.existingFilters){
					customFilter.log("Existing Filters: " + customFilter.canvas.existingFilters);
				} 
				else {
					customFilter.log("No Existing Filters Detected");
				}
				// getScores is defined in the individual visualization
				customFilter.getScores();
			};

			// this logic is specific to each custom filter. This is a place holder which will warn you if you are missing the logic rather than error out
			customFilter.clearData = function (){
				customFilter.data.series = false;
				customFilter.data.categories = false;
			}

			// this logic is specific to each custom filter. This is a place holder which will warn you if you are missing the logic rather than error out
			customFilter.getScores = function (){
				customFilter.clearData();
				for(obj in customFilter.config.counts){
					if(customFilter.config.counts.hasOwnProperty(obj)){
						var currObj = customFilter.config.counts[obj];
						var filter = customFilter.getCombinedFilters(currObj);
						var url = '/api/now/stats/' + customFilter.config.table + '?sysparm_count=true${AMP}sysparm_display_value=true';
						if(filter){
							url += '${AMP}sysparm_query=' + filter;
						}

                        var onClickRedirectUrl = '/nav_to.do?uri=/' + customFilter.config.table + '_list.do?sysparm_query=' + filter;
						customFilter.getData(url, {label : currObj.label, onClickRedirectUrl: onClickRedirectUrl});
					}
				}
			}

			customFilter.renderChart = function (){
                if(customFilter.data.series.length != customFilter.config.counts.length){
                    customFilter.log("Data not ready");
                    return;
                }

				var colors = Highcharts.getOptions().colors;
				this.chart = customFilter.elements.main.highcharts({
					chart: {
						type: 'bar'
					},
					credits:{
						enabled: false
					},
					title: {
						text: customFilter.config.title
					},
					subtitle: {
						text: customFilter.config.subtitle
					},
					xAxis: {
						categories: customFilter.data.categories,
						title: {
							text: customFilter.config.xAxisLabel
						}
					},
					yAxis: {
						min: 0,
						title: {
							text: customFilter.config.yAxisLabel,
						},
						labels: {
							overflow: 'justify'
						}
					},
					series: [{
						data: customFilter.data.series,
					}],
					legend: {
						enabled: false
					},
					style:{ height: "100%" },
					plotOptions: {
						series: {
							events:{
								click: function(){
									if(event.point.url)
										window.open(event.point.url, '_self');
								}
							}
						}
					}
					});
					};

					return customFilter;
			}
	)();
	</script>

    <script>
		// initialize the custom object
        customFilter${jvar_uuid}.init();
        if(customFilter${jvar_uuid}.verboseLogging)
        {
        // to help debugging, dump the full object
        customFilter${jvar_uuid}.log('Debug: ', customFilter${jvar_uuid});
        }
	</script>
</j:jelly>]]></programmatic_content>
        <sys_class_name>content_block_programmatic</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2023-09-19 01:37:21</sys_created_on>
        <sys_id>967a403647193110b3bb6285d36d4321</sys_id>
        <sys_mod_count>88</sys_mod_count>
        <sys_name>Bar Chart</sys_name>
        <sys_package display_value="Custom Visualizations" source="x_snc_custom_vis">c622b25c1340ff4005ef54c32244b061</sys_package>
        <sys_policy/>
        <sys_scope display_value="Custom Visualizations">c622b25c1340ff4005ef54c32244b061</sys_scope>
        <sys_update_name>content_block_programmatic_967a403647193110b3bb6285d36d4321</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2023-09-19 17:11:21</sys_updated_on>
        <two_phase>false</two_phase>
    </content_block_programmatic>
</record_update>
